{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","books","setBooks","snow","setSnow","fetchData","a","axios","get","response","data","fetchJohnSnow","className","onClick","map","book","index","cleanedDate","Date","released","toDateString","authors","join","key","name","numberOfPages","country","e","alias","aliases","title","titles","playedBy","culture","born","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RA0FgBA,MAtFhB,WAAgB,IAAD,EACaC,mBAAS,MADtB,mBACNC,EADM,KACCC,EADD,OAEWF,mBAAS,MAFpB,mBAENG,EAFM,KAEAC,EAFA,KAIPC,EAAS,uCAAG,4BAAAC,EAAA,sEACOC,IAAMC,IAC3B,2DAFc,OACVC,EADU,OAIhBP,EAASO,EAASC,MAJF,2CAAH,qDAOTC,EAAa,uCAAG,mBAAAL,EAAA,SAAAA,EAAA,sEACGC,IAAMC,IAC3B,wDAFkB,OACdC,EADc,OAIhBH,EAAI,CAACG,EAASC,MAClBN,EAAQE,GALY,2CAAH,qDAQnB,OACE,yBAAKM,UAAU,OACb,+CACA,6DAGA,6BACE,4BAAQA,UAAU,eAAeC,QAASR,GAA1C,SAGA,8BAEF,qEACA,6BACE,4BAAQO,UAAU,eAAeC,QAASF,GAA1C,aAGA,8BAIF,yBAAKC,UAAU,SACZX,GACCA,EAAMa,KAAI,SAACC,EAAMC,GACf,IAAMC,EAAc,IAAIC,KAAKH,EAAKI,UAAUC,eACtCC,EAAUN,EAAKM,QAAQC,KAAK,MAElC,OACE,yBAAKV,UAAU,OAAOW,IAAKP,GACzB,oCAAUA,EAAQ,GAClB,4BAAKD,EAAKS,MAEV,yBAAKZ,UAAU,WACb,2BAAG,qCAAH,KAAmBS,GACnB,2BAAG,8CAAH,KAA4BN,EAAKU,cAAjC,UACA,2BAAG,sCAAH,KAAoBV,EAAKW,SACzB,2BAAG,4CAAH,KAA0BT,SAOtC,yBAAKL,UAAU,SACZT,GACCA,EAAKW,KAAI,SAACa,GACR,IAAMC,EAAQD,EAAEE,QAAQP,KAAK,MACvBQ,EAAQH,EAAEI,OAAOT,KAAK,MACtBU,EAAWL,EAAEK,SAASV,KAAK,MACjC,OACE,yBAAKV,UAAU,QACb,4BAAKT,EAAK,GAAGqB,MAEb,yBAAKZ,UAAU,WACb,2BAAG,oCAAH,KAAkBkB,GAClB,2BAAG,sCAAH,KAAoB3B,EAAK,GAAG8B,SAC5B,2BAAG,kCAAH,KAAgB9B,EAAK,GAAG+B,MACxB,2BAAG,oCAAH,KAAkBN,GAClB,2BAAG,wCAAH,KAAsBI,WCrEpBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64b6f819.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [books, setBooks] = useState(null);\n  const [snow, setSnow] = useState(null);\n\n  const fetchData = async () => {\n    const response = await axios.get(\n      'https://www.anapioficeandfire.com/api/books?pageSize=30'\n    );\n    setBooks(response.data);\n  };\n\n  const fetchJohnSnow = async () => {\n    const response = await axios.get(\n      'https://www.anapioficeandfire.com/api/characters/583'\n    );\n    let a = [response.data]\n    setSnow(a);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Game of Thrones</h1>\n      <h2>Click to see the set of books</h2>\n\n      {/* Fetch data from API */}\n      <div>\n        <button className=\"fetch-button\" onClick={fetchData}>\n          Books\n        </button>\n        <br />\n      </div>\n      <h2>Click to know details about John Snow</h2>\n      <div>\n        <button className=\"fetch-button\" onClick={fetchJohnSnow}>\n          John Snow\n        </button>\n        <br />\n      </div>\n\n      {/* Display data from API */}\n      <div className=\"books\">\n        {books &&\n          books.map((book, index) => {\n            const cleanedDate = new Date(book.released).toDateString();\n            const authors = book.authors.join(', ');\n\n            return (\n              <div className=\"book\" key={index}>\n                <h3>Book {index + 1}</h3>\n                <h2>{book.name}</h2>\n\n                <div className=\"details\">\n                  <p><b>Author</b>: {authors}</p>\n                  <p><b>Number of Pages</b>: {book.numberOfPages} pages</p>\n                  <p><b>Country</b>: {book.country}</p>\n                  <p><b>Released Date</b>: {cleanedDate}</p>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n\n      <div className=\"books\">\n        {snow &&\n          snow.map((e) => {\n            const alias = e.aliases.join(', ');\n            const title = e.titles.join(', ');\n            const playedBy = e.playedBy.join(', ')\n            return (\n              <div className=\"book\" >\n                <h3>{snow[0].name}</h3>\n\n                <div className=\"details\">\n                  <p><b>Title</b>: {title}</p>\n                  <p><b>Culture</b>: {snow[0].culture}</p>\n                  <p><b>DOB</b>: {snow[0].born}</p>\n                  <p><b>Alias</b>: {alias}</p>\n                  <p><b>Played By</b>: {playedBy}</p>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}